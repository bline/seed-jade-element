//
  @license
  Derived from https://github.com/PolymerLabs/seed-element
  http://polymer.github.io/LICENSE.txt
  Copyright (c) 2014 The Polymer Project Authors. All rights reserved.

//
  @license
  Jade/coffeescript version Copyright (c) 2014 Scott Beck. All rights reserved.
link(rel='import', href='../polymer/polymer.html')
//
  Element providing solution to no problem in particular.
  ##### Example
  <seed-jade-element></seed-jade-element>
  @element seed-jade-element
  @blurb Element providing solution to no problem in particular.
  @status alpha
  @homepage http://bline.github.io/seed-jade-element
polymer-element(name='seed-jade-element', attributes='notitle author')
  template
    link(rel='stylesheet', href='seed-jade-element.css')
    h1 Hello from seed-jade-element
    content
  script
    :coffee(bare=true)
      Polymer
        ###*
        * The `author` attribute sets an initial author.
        *
        * @attribute author
        * @type string
        * @default 'Scott Beck'
        ###
        author: 'Scott Beck'
        ###*
        * `fancy` is a property that does something fancy.
        *
        * @property fancy
        * @type bool
        * @default false
        ###
        fancy: false
        # Ready is a lifecycle callback.
        # You can do setup work in here.
        # More info: http://www.polymer-project.org/docs/polymer/polymer.html#lifecyclemethods
        ready: ->
        ###*
        * The `sayHello` method will return a greeting.
        *
        * @method sayHello
        * @param {String} greeting Pass in a specific greeting.
        * @return {String} Returns a string greeting.
        ###
        sayHello: (greeting) ->
          response = greeting or 'Hello World!'
          'seed-jade-element says, ' + response
        ###*
        * The `seed-jade-element-lasers-success` event is fired whenever we
        * call fireLasers.
        *
        * @event seed-jade-element-lasers-success
        * @param {Object} detail
        *   @param {string} detail.sound An amazing sound.
        ###
        ###*
        * The `fireLasers` method will fire the lasers. At least
        * it will dispatch an event that claims lasers were fired :)
        *
        * @method fireLasers
        ###
        fireLasers: ->
          this.fire 'seed-jade-element-lasers-success', sound: 'Pew pew pew!'
